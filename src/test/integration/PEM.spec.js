const pem = require("../../lib/PEM");
var execSync = require("child_process").execSync;
const assert = require("node:assert").strict;
const fs = require("fs");

const testDir = "./pem_test_files";

describe("Module PEM - for encoding/decoding RSA keys to/from PEM format.", () => {
    beforeAll(() => {
        fs.rmSync(testDir, { recursive: true, force: true });
        fs.mkdirSync(testDir);
    });
    test("Encode a predefined key and verify that a message can be encrypted and decrypted with openssl.", () => {
        // Predefined 2048 keys.
        const keys = {
            p: 22010724257700643774540554707661979901833246555363912651772920759243800072425146112589252570377995870069318744161003121362855142210671658800425582888988210229683795951098887062621759188671091413911642854741002993118885714825613907629768361301727553569169596002606206493792528382956626794984718086807727476513526229012762350922417741663182225317338456010188977392513054674973442090119824944698909914212082869314045864134352875511815200143100489398247644190884841065682264899679994582773970551467294658938133786866503497611355016609789992435301989319508190683727095864693149123697520429705933321842234666415321221575611n,
            q: 25850388200994011298087221286579041745098421845198946925616444320686082319377549808075551880773183176839720515360498355905039223726136110376101572724522432659791857398707865232706941815131007206967536608050498301888051346959472870595267357705226913698328876744583358643151701850348391094109074676882795562357090319169653834194576811413295857694995293042510055482746746553377635998040660061848179796708247199911617727899615457436899876767210262133589311267510725932322122218911077528341684677526283381962454492501456637957628013722646211830665463839245244747043875834683439618874104801842446238951665588571553865285367n,
            d: 49782022154684978435037259571373835076715732533604872204454614922611502348344043081725796362589306854882405001306220912527163718907738620979464619101046498528100148350949431672768864043018625534108232097490572384639945482994221898550617876867024972660036288434227005725754294520671490803086277737452978692326815390429183272547602170549612451949913555129915165173521261659944493742749863684011396778033244297286523905115153446402425331989954606710146574906435848386747131651703175076023263198256039148577521425025659930150898694085206808976614242077207433288653732959394862516683444520624263632963199374400946243639182344292725664224756394617243562116940756261846358803319319917049701436705406325568374644433143012152066316946020709914410990045570967002223469807069557841815466884634222243598014957166571864858046532446950210013751096114709158956231573307005054550197330688319994226675824006202503753785344640822570715821905880574388401634347407054097128854988038383793522970154951222177356620170594365238152110557590204394614024345844642697561827206614922767991856749699334608283423838701892501791719832492929880763764524254357237710000300417878539428599491943643330788832244967647472516273495769484990260927049372804871019430146793n,
            n: 568985766646597389553023522938459544719692878105138212358448220820228466934674494497220703909141158588843421097071119627536227528087978026357023498783621272067683889514505215127006111403437680786336101669556965882830154712067024863151699301749950406909800878115440403601109033833492761207161734230808487017618154908014890849834705868732115672033743401211937596787070618313181424209731045737540096031036751222753211923531882005035882278100044482030498095508037355375348232831822634279270422083032095863328395820004652047837364442668677823491518587899187923864405248859410726326453244427651267128271572619482876520645512335809417511588776819270638700466702101381101089000689748870431566271886433731633006812162154595058414134078384296325672682405103962360163541586363007029192275307739939849379930418448102814909995956054311542046873973348791391367438258568883177009346755766159722113733644246712811211092814009992294813729530835453604927156555085956000010306477815360262345857961593642846317735939615475347107757588979141616107301812058444871161039743795939186460737514412928567184741066052307306837997877428007459382867038585927131359895751165404957748061730186076955372594851621282984244657481329580660121865648233270827823882384237n,
            e: 65537n
        };
        const messagePath = `${testDir}/message.txt`;
        const publicKeyPath = `${testDir}/public_key.pem`;
        const privateKeyPath = `${testDir}/private_key.pem`;
        const encryptedMessagePath = `${testDir}/message.enc`;
        const message = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vitae lectus non nisl iaculis malesuada eget eu massa.`;
        fs.writeFileSync(messagePath, message);
        const privatePem = pem.encodePrivateKeyToPEM(...Object.values(keys));
        fs.writeFileSync(privateKeyPath, privatePem);
        const publicPem = pem.encodePublicKeyToPEM(keys.n, keys.e)
        fs.writeFileSync(publicKeyPath, publicPem);
        execSync(`openssl pkeyutl -encrypt -inkey ${publicKeyPath} -pubin -in ${messagePath} -out ${encryptedMessagePath}`);
        const decryptedMessage = execSync(`openssl pkeyutl -decrypt -inkey ${privateKeyPath} -in ${encryptedMessagePath}`, { encoding: 'utf-8' });
        assert.equal(message, decryptedMessage);
    });
    afterAll(() => fs.rmSync(testDir, { recursive: true, force: true }));
});